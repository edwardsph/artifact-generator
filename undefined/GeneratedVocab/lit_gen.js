const { LitVocabTerm } = require('@lit/vocab-term')

/**
  Generated by artifact generator [], version []
  as part of artifact: [lit-generated-vocab-lit-gen], version: [1.0.0]
  at ''.

  Vocabulary built from input: [./test/resources/vocabs/supported-data-types.ttl].

  Vocabulary for terms used during Source Code Generation from RDF vocabularies.
 */

const _NAMESPACE = "https://w3id.org/lit/vocab/code-generation#";
function _NS (localName) { return (_NAMESPACE + localName) }

const LIT_GEN = {
  NAMESPACE: _NAMESPACE,
  NS: _NS,

    // *****************
    // All the Classes.
    // *****************

    /**
     * This is a rdfs class.
     */
    class1: new LitVocabTerm(_NS('class1'), localStorage, true)
      .addLabel('', `A rdfs class`)
      .addComment('', `This is a rdfs class.`),

    /**
     * This is an owl class.
     */
    class2: new LitVocabTerm(_NS('class2'), localStorage, true)
      .addLabel('', `An owl class`)
      .addComment('', `This is an owl class.`),

    /**
     * This is a skos concept class.
     */
    class3: new LitVocabTerm(_NS('class3'), localStorage, true)
      .addLabel('', `A skos concept class`)
      .addComment('', `This is a skos concept class.`),

    /**
     * This is a schema payment status type class.
     */
    class4: new LitVocabTerm(_NS('class4'), localStorage, true)
      .addLabel('', `A schema payment status type class`)
      .addComment('', `This is a schema payment status type class.`),

    // *******************
    // All the Properties.
    // *******************

    /**
     * This is a rdf property.
     */
    property1: new LitVocabTerm(_NS('property1'), localStorage, true)
      .addLabel('', `A rdf property`)
      .addComment('', `This is a rdf property.`),

    /**
     * This is a data type property.
     */
    property2: new LitVocabTerm(_NS('property2'), localStorage, true)
      .addLabel('', `A rdfs data type property`)
      .addComment('', `This is a data type property.`),

    /**
     * This is an owl object property.
     */
    property3: new LitVocabTerm(_NS('property3'), localStorage, true)
      .addLabel('', `An owl object property`)
      .addComment('', `This is an owl object property.`),

    /**
     * This is an owl named individual property.
     */
    property4: new LitVocabTerm(_NS('property4'), localStorage, true)
      .addLabel('', `An owl named individual property`)
      .addComment('', `This is an owl named individual property.`),

    /**
     * This is an owl annotation property.
     */
    property5: new LitVocabTerm(_NS('property5'), localStorage, true)
      .addLabel('', `An owl annotation property`)
      .addComment('', `This is an owl annotation property.`),

    /**
     * This is an owl annotation property.
     */
    property5: new LitVocabTerm(_NS('property5'), localStorage, true)
      .addLabel('', `An owl annotation property`)
      .addComment('', `This is an owl annotation property.`),

    /**
     * This is an owl datatype property.
     */
    property6: new LitVocabTerm(_NS('property6'), localStorage, true)
      .addLabel('', `An owl datatype property`)
      .addComment('', `This is an owl datatype property.`),

    // *******************
    // All the Literals.
    // *******************

    /**
     * This is a rdfs literal.
     */
    literal1: new LitVocabTerm(_NS('literal1'), localStorage, true)
      .addLabel('', `A rdfs literal`)
      .addComment('', `This is a rdfs literal.`),

    /**
     * Welcome
     */
    literal2: new LitVocabTerm(_NS('literal2'), localStorage, true)
      .addMessage('en', `Welcome`)
      .addMessage('es', `Bienvenido`)
      .addMessage('fr', `Bienvenue`),
  //
  // Marker allowing us put commas at the end of all lines above (only the last line does not have a comma).
  //
  END_OF_VOCAB: 'End of vocab.'
}

module.exports = LIT_GEN;
