import {LitVocabTerm, getLocalStore} from '@pmcb55/lit-vocab-term-base'
import dataFactory from "@rdfjs/data-model"
const namedNode = dataFactory.namedNode;

/**
  Generated by artifact generator [{{generatorName}}], version [{{artifactGeneratorVersion}}]
  as part of artifact: [{{artifactName}}], version: [{{artifactVersion}}]
  at '{{generatedTimestamp}}'.

  {{sourceRdfResources}}
{{#if description}}

  {{{description}}}
{{/if}}
 */

function _NS(localName: string) { return (namedNode('{{namespace}}' + localName)) }

const {{vocabNameUpperCase}} = {
  PREFIX: '{{vocabPrefix}}',
  NAMESPACE: '{{namespace}}',
  NS: _NS,

{{#if classes}}
  // *****************
  // All the Classes.
  // *****************
  {{#each classes}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new LitVocabTerm(_NS('{{{name}}}'), dataFactory, getLocalStore(), {{#if ../strict}}true{{else}}false{{/if}})
  {{#each labels}}
  {{#if language}}
    .addLabel(`{{{valueEscapedForJavascript}}}`, '{{language}}')
  {{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavascript}}}`)
  {{/if}}
  {{/each}}
  {{#each comments}}
  {{#if language}}
    .addComment(`{{{valueEscapedForJavascript}}}`, '{{language}}')
  {{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavascript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}

{{#if properties}}
  // *******************
  // All the Properties.
  // *******************
  {{#each properties}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new LitVocabTerm(_NS('{{{name}}}'), dataFactory, getLocalStore(), {{#if ../strict}}true{{else}}false{{/if}})
  {{#each labels}}
  {{#if language}}
    .addLabel(`{{{valueEscapedForJavascript}}}`, '{{language}}')
  {{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavascript}}}`)
  {{/if}}
  {{/each}}
  {{#each comments}}
  {{#if language}}
    .addComment(`{{{valueEscapedForJavascript}}}`, '{{language}}')
  {{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavascript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}

{{#if literals}}
  // *******************
  // All the Literals.
  // *******************
  {{#each literals}}

  /**
   *{{#if comment}} {{{comment}}}{{/if}}
   */
  {{nameEscapedForLanguage}}: new LitVocabTerm(_NS('{{{name}}}'), dataFactory, getLocalStore(), {{#if ../strict}}true{{else}}false{{/if}})
  {{#each labels}}
  {{#if language}}
    .addLabel(`{{{valueEscapedForJavascript}}}`, '{{language}}')
  {{else}}
    .addLabelNoLanguage(`{{{valueEscapedForJavascript}}}`)
  {{/if}}
  {{/each}}
  {{#each comments}}
  {{#if language}}
    .addComment(`{{{valueEscapedForJavascript}}}`, '{{language}}')
  {{else}}
    .addCommentNoLanguage(`{{{valueEscapedForJavascript}}}`)
  {{/if}}
  {{/each}}
  {{#each definitions}}
  {{#if language}}
    .addMessage(`{{{valueEscapedForJavascript}}}`, '{{language}}')
  {{else}}
    .addMessageNoLanguage(`{{{valueEscapedForJavascript}}}`){{/if}}{{/each}},
{{/each}}
{{/if}}
  //
  // Marker allowing us put commas at the end of all lines above (only the last line does not have a comma).
  //
  END_OF_VOCAB: 'End of vocab.'
}

export { {{vocabNameUpperCase}} };
